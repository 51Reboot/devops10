
# 分析as_view类方法

## Django的as_view
@classonlymethod
def as_view(cls, **initkwargs):
    """Main entry point for a request-response process."""
    # 遍历接收到的请求可变参数
    for key in initkwargs:
    	# 判断请求方式，如果在http_method_names列表中已存在，会引发TypeError异常
        if key in cls.http_method_names:
            raise TypeError("You tried to pass in the %s method name as a "
                            "keyword argument to %s(). Don't do that."
                            % (key, cls.__name__))
         # 判断当前视图类是否存在接收到的请求，没有会引发TypeError异常
        if not hasattr(cls, key):
            raise TypeError("%s() received an invalid keyword %r. as_view "
                            "only accepts arguments that are already "
                            "attributes of the class." % (cls.__name__, key))

    # 增加属性，调用dispatch方法                        
    def view(request, *args, **kwargs):
    	# 创建一个当前类视图的实例对象
        self = cls(**initkwargs)
        # 如果请求中只有get请求没有head请求，把head请求定义为get请求
        if hasattr(self, 'get') and not hasattr(self, 'head'):
            self.head = self.get
        # 把参数request, args, kwargs封装到当前类视图中
        self.setup(request, *args, **kwargs)
        # 如果不存在request属性，会引发AttributeError异常
        if not hasattr(self, 'request'):
            raise AttributeError(
                "%s instance has no 'request' attribute. Did you override "
                "setup() and forget to call super()?" % cls.__name__
            )
        # 用dispatch方法调用指定的请求，并返回请求结果
        return self.dispatch(request, *args, **kwargs)
    view.view_class = cls
    view.view_initkwargs = initkwargs

    # take name and docstring from class
    update_wrapper(view, cls, updated=())

    # and possible attributes set by decorators
    # like csrf_exempt from dispatch
    update_wrapper(view, cls.dispatch, assigned=())
        return view


## DRF的as_view
@classmethod
def as_view(cls, **initkwargs):
    """
    Store the original class on the view function.

    This allows us to discover information about the view when we do URL
    reverse lookups.  Used for breadcrumb generation.
    """
    # 判断类中queryset属性是否存在，如果存在的话将一个异常信息保存在类中
    if isinstance(getattr(cls, 'queryset', None), models.query.QuerySet):
        def force_evaluation():
            raise RuntimeError(
                'Do not evaluate the `.queryset` attribute directly, '
                'as the result will be cached and reused between requests. '
                'Use `.all()` or call `.get_queryset()` instead.'
            )
        cls.queryset._fetch_all = force_evaluation

   # 继承父类的as_view(django.views.View)
    view = super().as_view(**initkwargs)
    view.cls = cls
    view.initkwargs = initkwargs

    # Note: session based authentication is explicitly CSRF validated,
    # all other authentication is CSRF exempt.
    # 所有视图都可以被跨域访问
    return csrf_exempt(view)